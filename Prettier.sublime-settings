{
    "debug": false,
    "prettier_cli_path": "",
    "node_path": "",
    "auto_format_on_save": true,
    "auto_format_on_save_excludes": ["*/node_modules/*", "*/.git/*"],
    "allow_inline_formatting": true,
    "custom_file_extensions": [],
    "max_file_size_limit": -1,
    "proseWrap": "always",

    // ----------------------------------------------------------------------
    // Additional CLI Arguments
    // ----------------------------------------------------------------------
    //
    // @param {object} "additional_cli_args"
    // @default {}
    //
    // A key-value pair of additional arguments to append to the prettier
    // command.
    //
    // Example:
    // {
    //     "--no-color": "",
    //     "--single-quote=false": "",
    //     "--cursor-offset": -1,
    //     "--list-different": ""
    // }
    //
    // NOTE: If choosing to specify additional cli args, it is assumed that each
    // argument is supported by the prettier-cli. Otherwise, the command will
    // fail to run, and errors will be dumped out to the Sublime Text Console.
    // You can also enable the debug setting to inspect the generated
    // command-line output passed to prettier; which is also useful for quickly
    // troubleshooting issues.
    // ----------------------------------------------------------------------

    "additional_cli_args": {},

    // ----------------------------------------------------------------------
    // Prettier Options
    // ----------------------------------------------------------------------
    //
    // Native Prettier Options. For a complete list of supported options and
    // acceptable values, visit https://github.com/jlongster/prettier.
    // ----------------------------------------------------------------------

    "prettier_options": {
        // Fit code within this line limit
        "printWidth": 80,

        // If true, will use single instead of double quotes
        "singleQuote": true,

        // Controls the printing of trailing commas wherever possible.
        "trailingComma": "es5",

        // Controls the printing of spaces inside array and objects
        "bracketSpacing": true,

        // If true, puts the `>` of a multi-line jsx element at the end of
        // the last line instead of being alone on the next line
        "jsxBracketSameLine": false,

        // Which parser to use. Valid options are "flow", "babylon",
        // "typescript" and "postcss".
        "parser": "babylon",

        // Whether to add a semicolon at the end of every line (semi: true), or
        // only at the beginning of lines that may introduce
        // ASI failures (semi: false)
        "semi": true,

        "tabWidth": 2,

        "useTabs": false,

        "proseWrap": "always"
    }
}